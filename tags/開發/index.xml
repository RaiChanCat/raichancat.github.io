<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>開發 on 小雷的雜記堆</title>
    <link>https://raichancat.github.io/tags/%E9%96%8B%E7%99%BC/</link>
    <description>Recent content in 開發 on 小雷的雜記堆</description>
    <image>
      <url>https://raichancat.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://raichancat.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Jan 2022 22:07:51 +0800</lastBuildDate><atom:link href="https://raichancat.github.io/tags/%E9%96%8B%E7%99%BC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>來聊 Unity WebGL build</title>
      <link>https://raichancat.github.io/2022/unity-webgl/</link>
      <pubDate>Thu, 20 Jan 2022 22:07:51 +0800</pubDate>
      
      <guid>https://raichancat.github.io/2022/unity-webgl/</guid>
      <description>目前版本 Unity 2021.2.7f
疫情的發生讓時間變得好快，於是我就這樣休息了半年。
WebGL 真的必須要說這是我接觸 Unity 五年多以來讓我覺得最靠北的一個東西，不成熟不穩定毛一堆做得我OO叫的，我一定要分享出來讓大家知道拿 Unity 做 WebGL 專案是需要被謹慎評估的。
題外話就是這邊不討論 ECS 跟 Project Tiny 的東西，嗯。
講一些能做到跟不能做到的事情 在硬體規格允許的前提下，確實能 Load 一個不小規模的場景或是高面數模型。 其實只要記憶體跟顯示卡允許，跑場景不會有什麼太大問題。在完全沒有多做設定的狀態下高刷新率螢幕的支援也是沒有問題。(雖然通常會因為效能所以刻意關到 30fps) 唯一我覺得差異比較大的是反鋸齒跟 Shader 算出來的效果真的落差很大，如果是要展示一些擬真效果的物件或場景會顯得比較尷尬。
在 PC 的環境下大多數時候能夠提供一定的效能。 啊你要跑大場景用內顯的話那還真的無解，可能要考慮一下 TA 吧。
大多數狀況下能夠在 Unity 實現的東西都能在 WebGL 被實現。 絕大多數的 Plugin 都能無痛在 WebGL 底下工作，不過由於 WebGL 的環境某種程度上比行動裝置來得嚴苛，所以其實在特效，或是整體的內容規模設計是需要被評估的。
手機沒有被官方支援，所以編出來在手機上跑起來很不理想這件事是可以被預估的。 Unity WebGL 的記憶體管理或是硬體的優化都是針對電腦來實作的，所以在手機端很常會遇到 OO 功能罷工不 work，被瀏覽器 block 掉，記憶體原地爆炸之類的其實都是日常。
Unity WebGL 沒有 WebXR 支援，儘管有人做 plugin 來做相容。 https://github.com/De-Panther/unity-webxr-export 跟本文無關但是題外話，如果要做 WebAR 還是選擇像是 8th Wall 的商業解案要不然就乖乖學 three.js 吧，拿 Unity 做這個光是那個 WebGL build 出來的基本盤大小應該就直接勸退了。</description>
    </item>
    
    <item>
      <title>研究！Google 表單透過網址一鍵自動填寫表單內容！</title>
      <link>https://raichancat.github.io/2021/gform-autocomplete/</link>
      <pubDate>Sat, 31 Jul 2021 14:36:17 +0800</pubDate>
      
      <guid>https://raichancat.github.io/2021/gform-autocomplete/</guid>
      <description>原理 透過網址來預填表單，格式如下
https://docs.google.com/forms/d/e/[表單連結]/viewform?&amp;amp;[欄位1代號]=[欄位1內容]&amp;amp;&amp;amp;[欄位2代號]=[欄位2內容]&amp;hellip;
 表單連結點進去就會自動填入所有的項目 項目可以跨頁 跨頁的下一步還是得自己按 不管是選擇，簡答，下拉式選單，欄位內容的部分就直接填寫文字內容（或是選擇的內容）即可  欄位代號取得  打開表單，點擊 F12 開啟開發人員面板  在面板按下 command+F 或是 control + F 搜尋元素，輸入 entry.  你可以看到
action=&amp;quot;&amp;quot; 欄是表單連結
name=&amp;ldquo;entry.xxxxxxxxxx&amp;rdquo; 是欄位代號
value=&amp;ldquo;aaaa&amp;rdquo; 是欄位內容
  網址建立 複製一下網址的連結，按照上面按照 原理 給的格式貼入相關的元素，拿我這份表單舉例
https://docs.google.com/forms/d/e/viewform?[表單連結]&amp;amp;[欄位1代號]=[欄位1內容]&amp;amp;&amp;amp;[欄位2代號]=[欄位2內容]&amp;hellip;
https://docs.google.com/forms/d/e/1FAIpQLSfN7WG27WOFUKygeLOPAMmI5N8TpsZH1hQENMGSAcGil7AGyQ/viewform?entry.1876558801=110/07/31&amp;amp;entry.1136496505=0900000000&amp;amp;entry.437250203=37.5&amp;amp;entry.836727167=A班&amp;amp;entry.1919260157=男&amp;amp;entry.1695249575=aaaa 順序其實無所謂，填完之後開新分頁打開連結
將將！東西都自動填完了
延伸應用 基本上有了網址之後很多事情就好辦了。
舉個例子就是如果你要用在「捷徑」App 的話，只要在捷徑裡面撰寫程式碼，呼叫 Safari 開啟即可。
例如說我其中一個欄位想要產生在 36.5~37.5 之間的亂數，以變數的方式安插在 URL 裡面就可以了
或者是如果要分享給親朋好友用，透過 回報 的指令把一些欄位挖空即可，玩法還很多呢 www
作完之後不免俗的放到桌面上方便之後快速呼叫多舒服www
 除此之外像是剛剛有取出的 action 連結甚至可以拿來當作 POST 來用，可以直接傳參數進去做到完全自動化的填表單，酷吧！</description>
    </item>
    
    <item>
      <title>M1 Mac - 我也想要漂漂的終端機... iTerm2 &#43; Oh My Zsh &#43; Powerlevel10k 實作</title>
      <link>https://raichancat.github.io/2021/iterm2/</link>
      <pubDate>Tue, 27 Jul 2021 21:54:25 +0800</pubDate>
      
      <guid>https://raichancat.github.io/2021/iterm2/</guid>
      <description>好久沒用 Mac 了。
回來的第一件事情就是來把終端機弄漂亮這樣工作起來心情比較愉悅（？
安裝 Homebrew Homebrew 是 macOS 的一個 Package Manager，我們會透過它來安裝各式各樣的軟體跟套件。
打開終端機輸入指令
/bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34; 他就會自動裝好了。（然後回頭一看才發現好像用不太到www 算了）
安裝 iTerm2 其實 Mac 的 terminal 沒有那麼好用，所以大家都用第三方的 iTerm2
由於 ARM 版的 Homebrew 沒有 cask 能用，所以沒辦法用指令安裝。
因此我們就直接上官網抓吧
https://iterm2.com/downloads.html
安裝 Oh My Zsh 這個是一個 zsh 外掛，提供更細部的修正以及佈景主題功能
由於 macOS Big Sur 已經內建 zsh 了
所以我們就直接跳過 zsh 的安裝直接來裝 Oh My Zsh。
sh -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&amp;#34; 安裝結束之後預設終端機會被覆蓋掉，重新啟動 iTerm2 即可
安裝 Powerlevel10k 這個是 Oh My Zsh 的超高自訂性終極佈景主題</description>
    </item>
    
    <item>
      <title>研究！用 Docsify 來代替 GitBook 寫文件吧</title>
      <link>https://raichancat.github.io/2021/docsify/</link>
      <pubDate>Sun, 18 Jul 2021 11:36:08 +0800</pubDate>
      
      <guid>https://raichancat.github.io/2021/docsify/</guid>
      <description>簡介 首先不免俗地來簡單介紹一下 Docsify 是什麼。 Docsify 是一個文件生產器，以線上直接解析 Markdown 的方式來呈現網頁內容。
特色：
 無靜態產生的 HTML 檔（除了首頁的設定檔 HTML 以外其他都是 MD 檔） 簡單而且輕量 內建搜尋外掛 多種佈景 外掛支援 表情符號支援 IE11 支援 支援伺服器端 render  簡單來說就是一個好用的文件生產器，快速產生一個類似 GitBook 架構的網站，能掛在任何伺服器或是 GitHub Pages 之類的地方。
安裝  先確定電腦有裝 NPM 吧，沒有的話去裝一下。 打開要存放的位置，用命令提示字元開啟這個路徑 (有裝 Windows Terminal 的話右鍵就有了，要不然就用 cd {路徑} 吧) 安裝 Docsify 至全系統  npm i docsify-cli -g 建立檔案 假設我們要將文件存放於 docs 資料夾裡面，我們就輸入指令 (至於為什麼是 docs，其實是為了 GitHub Pages 的預設目錄，能夠輕鬆地掛起來。)
docsify init ./docs 這邊解釋一下裏頭的文件分別在幹嘛
 index.html 進入的網頁，也是所有設定設定的地方 README.</description>
    </item>
    
    <item>
      <title>HoloLens - MRTK 如何安裝 AppX 安裝檔</title>
      <link>https://raichancat.github.io/2021/hololens-appx-install/</link>
      <pubDate>Wed, 14 Jul 2021 11:01:00 +0800</pubDate>
      
      <guid>https://raichancat.github.io/2021/hololens-appx-install/</guid>
      <description>Unity 版本：2020.3.13
MRTK 版本：2.7.2
透過這種方法，安裝前須先將舊版軟體解除安裝 準備 將編好的 Appx 準備好，並且將 HoloLens 與電腦連接同一個 WiFi (網路) 底下。（你可以從 HoloLens 的 WiFi 設定檢查你的 IP）
Windows 裝置入口網站 若已設定過可以跳過 HoloLens 到 設定 &amp;gt; 更新與安全性 &amp;gt; 開發人員專用 底下開啟 裝置入口網站
電腦打開瀏覽器，輸入 HoloLens 上給的的 IP 位址，接受風險並繼續
點擊 Request pin 的按鈕
此時 HoloLens 上會顯示 pin 碼
將資料輸入到瀏覽器當中
 PIN displayed on your device 頭顯顯示的 PIN 碼 New user name 使用者名稱 New password 密碼 Confirm password 重新輸入密碼  瀏覽器會提示登入，輸入剛剛設定好的資訊
Windows 裝置入口網站順利開啟
AppX 安裝 執行檔的結構如下</description>
    </item>
    
    <item>
      <title>HoloLens - MRTK 如何打包 AppX 安裝檔</title>
      <link>https://raichancat.github.io/2021/hololens-appx-build/</link>
      <pubDate>Wed, 14 Jul 2021 10:39:36 +0800</pubDate>
      
      <guid>https://raichancat.github.io/2021/hololens-appx-build/</guid>
      <description>Unity 版本：2020.3.13
MRTK 版本：2.7.2
準備 在開始之前確保自己的 MRTK 專案有安裝「Mixed Reality Toolkit Tools」包，使用裡面的工具比較懶人方便。
流程 打開 Mixed Reality &amp;gt; Utilities &amp;gt; Build Window 開啟編譯視窗
檢查 Scene 已經加入了上方 Scene in Build 視窗當中
Target Device 選擇 HoloLens
點擊 Build Unity Project。
編譯的檔案會被放置於 /專案資料夾/Builds/WSAPlayer 編譯完成會顯示 Build Complete 視窗，點擊 Build AppX
編譯途中不會有任何視窗，內容都會顯示於 Console 當中。完成之後會顯示 Command Successful
編譯完成的執行檔會放置於 /專案資料夾/Builds/WSAPlayer/AppPackages/執行檔名稱/完整執行檔名稱 底下
檔案架構  .appx 軟體安裝檔 Dependencies 依賴  ARM64 ARM64 平台依賴  .appx 依賴安裝檔      安裝的時候需要同時安裝軟體本體的 AppX 以及依賴的 AppX 其他的檔案就不是那麼重要了。</description>
    </item>
    
    <item>
      <title>研究！Unreal Engine 4 Dump 遊戲素材</title>
      <link>https://raichancat.github.io/2021/unreal-dump/</link>
      <pubDate>Fri, 25 Jun 2021 23:21:30 +0800</pubDate>
      
      <guid>https://raichancat.github.io/2021/unreal-dump/</guid>
      <description>不要拿來做一些奇怪的事，OK？
拆包的一些基本常識  UE4 的素材裝在遊戲目錄底下的 Content/Paks 裡面的 Pak 檔，檔名上面會註明平台 -WindowsNoEditor 或是 -AndroidASTC 之類的 UE4 的執行檔放在 Binaries 裡面，像 Windows 會存放在 Binaries\Win64 裡面，通常檔名會帶有 -Win64-Shipping.exe  簡易的流程  絕大多數的 UE4 遊戲會將 pak 加密，因此我們要從遊戲運行當中擷取 AES 的金鑰。 透過專門的解包的工具將東西取出 透過能讀取 uassets 的工具來檢視裡面的內容  流程 AES 金鑰尋找   準備好 pak 檔案以及遊戲 exe 執行檔
  下載 AES Key Finder 1.9 解壓縮
  將遊戲 exe 執行檔貼到解壓縮後的 AES Key Finder 資料夾底下
  將遊戲執行檔 exe 拖到 RUN Find 256-bit UE4 AES Key.</description>
    </item>
    
  </channel>
</rss>
